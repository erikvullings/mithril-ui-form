/**
 * **Components**
 * @category Components
 */

/**
 * Enumeration of built-in form field component types.
 * 
 * ComponentType defines all the standard field types available in the mithril-ui-form system.
 * Each type corresponds to a specific UI component with its own behavior, validation rules,
 * and data handling characteristics. The system is extensible through plugins that can
 * register custom types using the string union member.
 * 
 * The form field factory uses this type to determine which component to render for each
 * field definition. Built-in types provide common form functionality, while the string
 * union allows for unlimited extensibility through the plugin system.
 * 
 * @example
 * ```typescript
 * // Using built-in types
 * const textField = { type: 'text', id: 'name', label: 'Name' };
 * const numberField = { type: 'number', id: 'age', label: 'Age', min: 0 };
 * const selectField = { type: 'select', id: 'country', options: countries };
 * 
 * // Using plugin-registered custom types
 * const ratingField = { type: 'rating', id: 'score', maxStars: 5 };
 * const mapField = { type: 'leaflet', id: 'location', zoom: 10 };
 * ```
 * 
 * @see {@link https://github.com/erikvullings/mithril-ui-form/blob/master/README.md#field-types} Field Types Documentation
 */
export type ComponentType =
  /** 
   * Auto-generates field values (ID, GUID, or timestamp).
   * Displays the generated value in readonly format.
   * Used with `autogenerate` property for automatic value creation.
   */
  | 'autogenerate'
  
  /** 
   * Boolean checkbox input for true/false values.
   * Supports single checkboxes and checkbox groups with options.
   * Can be styled as toggle switches with additional configuration.
   */
  | 'checkbox'
  
  /** 
   * Color picker input for hexadecimal color values.
   * Provides a color palette interface for color selection.
   * Supports both predefined color palettes and custom color input.
   */
  | 'color'
  
  /** 
   * Alternative spelling for color picker (British English).
   * Functionally identical to 'color' type.
   * Maintained for international compatibility.
   */
  | 'colour'
  
  /** 
   * Date input with date picker interface.
   * Handles date-only values without time components.
   * Supports min/max date constraints and localized formatting.
   */
  | 'date'
  
  /** 
   * Combined date and time input with picker interfaces.
   * Handles full datetime values with configurable precision.
   * Supports timezone handling and various output formats.
   */
  | 'datetime'
  
  /** 
   * Email address input with validation.
   * Provides email format validation and appropriate mobile keyboard.
   * Supports multiple email addresses when used with `multiple` property.
   */
  | 'email'
  
  /** 
   * Base64 encoded file input and display.
   * Converts uploaded files to base64 strings for storage.
   * Useful for embedding small files directly in form data.
   */
  | 'base64'
  
  /** 
   * File upload input with drag-and-drop support.
   * Handles file selection, upload progress, and file metadata.
   * Supports file type filtering and multiple file selection.
   */
  | 'file'
  
  /** 
   * Interactive map component for location selection.
   * Provides geographic coordinate input through map interaction.
   * Requires map plugin (e.g., Leaflet) for full functionality.
   */
  | 'map'
  
  /** 
   * Markdown editor and renderer.
   * Provides rich text editing with markdown syntax.
   * Displays formatted preview alongside or instead of raw markdown.
   */
  | 'md'
  
  /** 
   * Hidden field that displays nothing in the UI.
   * Used for fields that should exist in the data but not be visible.
   * Commonly used with autogenerated fields or computed values.
   */
  | 'none'
  
  /** 
   * Numeric input with validation and controls.
   * Supports integer and decimal numbers with min/max constraints.
   * Provides increment/decrement controls and step validation.
   */
  | 'number'
  
  /** 
   * Multiple choice selection with checkboxes or similar controls.
   * Allows selection of multiple options from a predefined list.
   * Returns an array of selected option IDs.
   */
  | 'options'
  
  /** 
   * Single-choice selection with radio button interface.
   * Mutually exclusive selection from a predefined list of options.
   * Provides clear visual indication of the selected option.
   */
  | 'radio'
  
  /** 
   * Visual section divider with optional title.
   * Creates logical groupings within forms without data binding.
   * Supports hierarchical levels for nested section organization.
   */
  | 'section'
  
  /** 
   * Dropdown selection from a list of options.
   * Supports single and multiple selection modes.
   * Can display option icons and support option grouping.
   */
  | 'select'
  
  /** 
   * Toggle switch for boolean values.
   * Modern alternative to checkboxes with on/off visual metaphor.
   * Provides clear indication of current state and toggle action.
   */
  | 'switch'
  
  /** 
   * Tag input for managing lists of text values.
   * Allows adding, removing, and editing individual tags.
   * Supports tag suggestions and validation.
   */
  | 'tags'
  
  /** 
   * Single-line text input for string values.
   * The most basic and commonly used form field type.
   * Supports validation, formatting, and input constraints.
   */
  | 'text'
  
  /** 
   * Multi-line text input for longer text content.
   * Provides resizable text area with configurable dimensions.
   * Supports character counting and rich text features.
   */
  | 'textarea'
  
  /** 
   * Time-only input with time picker interface.
   * Handles time values without date components.
   * Supports 12/24 hour formats and second precision.
   */
  | 'time'
  
  /** 
   * URL input with validation and formatting.
   * Validates URL format and provides appropriate mobile keyboard.
   * Can automatically add protocol prefixes for user convenience.
   */
  | 'url'
  
  /**
   * Extension point for custom plugin types.
   * 
   * Any string value not matching the built-in types will be treated as a
   * custom type that should be handled by a registered plugin. This allows
   * unlimited extensibility while maintaining type safety for built-in types.
   * 
   * @example Custom plugin types: 'rating', 'signature', 'barcode', 'qr-code'
   */
  | string;
